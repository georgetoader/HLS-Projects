-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity traffic is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stg : IN STD_LOGIC;
    dr : IN STD_LOGIC;
    sus : IN STD_LOGIC;
    jos : IN STD_LOGIC;
    ew : OUT STD_LOGIC;
    ew_ap_vld : OUT STD_LOGIC;
    ns : OUT STD_LOGIC;
    ns_ap_vld : OUT STD_LOGIC );
end;


architecture behav of traffic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "traffic_traffic,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.934000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=34,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ew_rule_1_fu_70_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ew_rule_1_fu_70_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_76_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_76_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_82_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_82_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_1_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ew_rule_1_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_112_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_112_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ns_rule_4_fu_118_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ns_rule_4_fu_118_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ns_rule_4_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_136_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_2_fu_142_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_2_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ew_rule_5_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln97_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ew_rule_2_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ns_rule_3_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    and_ln40_fu_82_p0 <= (0=>sus, others=>'-');
    and_ln40_fu_82_p1 <= (0=>jos, others=>'-');
    and_ln40_fu_82_p2 <= (and_ln40_fu_82_p1 and and_ln40_fu_82_p0);
    and_ln55_fu_130_p2 <= (xor_ln55_fu_124_p2 and ns_rule_4_fu_118_p2);
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    ew <= (or_ln97_fu_154_p2(0) or ew_rule_2_fu_94_p2(0));

    ew_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            ew_ap_vld <= ap_const_logic_1;
        else 
            ew_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ew_rule_1_fu_70_p0 <= (0=>stg, others=>'-');
    ew_rule_1_fu_70_p1 <= (0=>dr, others=>'-');
    ew_rule_1_fu_70_p2 <= (ew_rule_1_fu_70_p1 and ew_rule_1_fu_70_p0);
    ew_rule_2_fu_94_p2 <= (xor_ln26_fu_76_p2 and xor_ln26_1_fu_88_p2);
    ew_rule_5_fu_148_p2 <= (or_ln55_2_fu_142_p2 xor ap_const_lv1_1);
    ns <= (ns_rule_3_fu_106_p2(0) or and_ln55_fu_130_p2(0));

    ns_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            ns_ap_vld <= ap_const_logic_1;
        else 
            ns_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ns_rule_3_fu_106_p2 <= (xor_ln40_fu_100_p2 and and_ln40_fu_82_p2);
    ns_rule_4_fu_118_p0 <= (0=>sus, others=>'-');
    ns_rule_4_fu_118_p1 <= (0=>jos, others=>'-');
    ns_rule_4_fu_118_p2 <= (ns_rule_4_fu_118_p1 xor ns_rule_4_fu_118_p0);
    or_ln55_1_fu_136_p1 <= (0=>jos, others=>'-');
    or_ln55_1_fu_136_p2 <= (or_ln55_fu_112_p2 or or_ln55_1_fu_136_p1);
    or_ln55_2_fu_142_p1 <= (0=>sus, others=>'-');
    or_ln55_2_fu_142_p2 <= (or_ln55_2_fu_142_p1 or or_ln55_1_fu_136_p2);
    or_ln55_fu_112_p0 <= (0=>stg, others=>'-');
    or_ln55_fu_112_p1 <= (0=>dr, others=>'-');
    or_ln55_fu_112_p2 <= (or_ln55_fu_112_p1 or or_ln55_fu_112_p0);
    or_ln97_fu_154_p2 <= (ew_rule_5_fu_148_p2 or ew_rule_1_fu_70_p2);
    xor_ln26_1_fu_88_p2 <= (ap_const_lv1_1 xor and_ln40_fu_82_p2);
    xor_ln26_fu_76_p0 <= (0=>stg, others=>'-');
    xor_ln26_fu_76_p1 <= (0=>dr, others=>'-');
    xor_ln26_fu_76_p2 <= (xor_ln26_fu_76_p1 xor xor_ln26_fu_76_p0);
    xor_ln40_fu_100_p2 <= (ew_rule_1_fu_70_p2 xor ap_const_lv1_1);
    xor_ln55_fu_124_p2 <= (or_ln55_fu_112_p2 xor ap_const_lv1_1);
end behav;
